import { readFileSync } from 'node:fs'

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig((params) => {
  const define = {
    'process.env.NODE_ENV': `'${params.mode}'`,
  }

  const dedupe = [
    '@apollo/client',
    'final-form',
    'react',
    'react-dom',
    'react-router-dom',
    'react-final-form',
    'react-final-form-arrays',
    'react-intl',
    'react-table',
    'styled-components',
  ]

  const plugins = [
    react({
      // https://github.com/alloc/vite-react-jsx/issues/10#issuecomment-1115328902
      jsxRuntime: 'classic',
    }),
  ]

  const project = JSON.parse(readFileSync('./package.json'))

  let emptyOutDir = true
  let minify = true

  switch (params.mode) {
    case 'development':
      minify = false
      try {
        JSON.parse(readFileSync(('./linked-deps.json'))).forEach(dependency =>
          dedupe.push(dependency))
      } catch {}

      break

    case 'production':
      // Preserve the declaration files generated by TypeScript.
      emptyOutDir = false

      break
  }

  return {
    build: {
      emptyOutDir,
      lib: {
        entry: new URL('src/index.ts', import.meta.url).pathname,
        fileName: 'index',
        formats: ['cjs', 'es'],
      },
      minify,
      rollupOptions: {
        external: Object.keys(project.peerDependencies),
      },
      sourcemap: true,
    },
    define,
    plugins,
    resolve: {
      alias: {
        '@' : new URL('src', import.meta.url).pathname,
        'querystring': 'qs',
        'polygon-clipping': 'polygon-clipping/dist/polygon-clipping.cjs.js',
      },
      dedupe,
    },
  }
})
